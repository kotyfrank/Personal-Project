import matplotlib
matplotlib.use('Agg')  # Set the backend to 'Agg'
import matplotlib.pyplot as plt
import pandas as pd
from flask import Flask, render_template, request
import io
import base64

app = Flask(__name__)

# Load data from CSV
# This dataset came from Kaggle https://www.kaggle.com/datasets/stefanoleone992/mutual-funds-and-etfs?select=MutualFunds.csv
data = pd.read_csv('MutualFunds.csv')
df = pd.DataFrame(data)

def screen_funds(df, max_expense_ratio, min_return_5y, min_morningstar_rating):
    filtered_df = df[
        (df['fund_annual_report_net_expense_ratio'] <= max_expense_ratio) &
        (df['fund_return_5years'] >= min_return_5y) &
        (df['morningstar_overall_rating'] >= min_morningstar_rating)
    ].copy()  # Create a copy of the slice

    filtered_df['Yahoo Finance URL'] = 'https://finance.yahoo.com/quote/' + filtered_df['fund_symbol'].astype(str)

    return filtered_df[['fund_symbol','fund_long_name', 'fund_category', 'fund_annual_report_net_expense_ratio', 'fund_return_5years', 'morningstar_overall_rating', 'Yahoo Finance URL']].rename(
        columns={
            'fund_long_name': 'Fund Name',
            'fund_category': 'Fund Category',
            'fund_annual_report_net_expense_ratio': 'Annual Expense Ratio',
            'fund_return_5years': '5 Year Return',
            'morningstar_overall_rating': 'Morningstar Rating'
        }
    )


@app.route('/', methods=['GET', 'POST'])
def index():
    results = []
    if request.method == 'POST':
        try:
            max_exp_ratio = float(request.form['max_expense_ratio'])
            min_return_5y = float(request.form['min_return_5y'])
            min_rating = int(request.form['min_rating'])
            

            results = screen_funds(df, max_exp_ratio, min_return_5y, min_rating).to_dict(orient='records')
        except ValueError:
            results = ["Please enter valid numbers."]
    
    return render_template('index.html', results=results)

@app.route('/visualize/<ticker>')
def visualize(ticker):
    fund = df[df['fund_symbol'] == ticker]
    if fund.empty:
        return "Fund not found", 404
    
    # Extract the fund symbol for use in the plot
    fund_symbol = fund['fund_symbol'].iloc[0]

    # Calculate dataset averages
    avg_expense_ratio = df['fund_annual_report_net_expense_ratio'].mean()
    avg_return_5y = df['fund_return_5years'].mean()
    avg_morningstar_rating = df['morningstar_overall_rating'].mean()

    # Generate visualizations
    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    
    # Expense Ratio
    ax[0].bar([fund_symbol, 'Data Set Average'], [fund['fund_annual_report_net_expense_ratio'].iloc[0], avg_expense_ratio])
    ax[0].set_title('Annual Expense Ratio')

    # 5 Year Return
    ax[1].bar([fund_symbol, 'Data Set Average'], [fund['fund_return_5years'].iloc[0], avg_return_5y])
    ax[1].set_title('5 Year Return')

    # Morningstar Rating
    ax[2].bar([fund_symbol, 'Data Set Average'], [fund['morningstar_overall_rating'].iloc[0], avg_morningstar_rating])
    ax[2].set_title('Morningstar Rating')

    # Convert plot to PNG image
    pic_IObytes = io.BytesIO()
    plt.savefig(pic_IObytes, format='png')
    pic_IObytes.seek(0)
    pic_hash = base64.b64encode(pic_IObytes.read())
    
    return render_template('visualize.html', image=pic_hash.decode('utf-8'))

if __name__ == '__main__':
    app.run(debug=True)
